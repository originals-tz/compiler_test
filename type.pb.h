// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type.proto

#ifndef PROTOBUF_type_2eproto__INCLUDED
#define PROTOBUF_type_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace token {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_type_2eproto();
void protobuf_AssignDesc_type_2eproto();
void protobuf_ShutdownFile_type_2eproto();


enum token {
  E_TOKEN_EOF = 1,
  E_TOKEN_PLUS = 2,
  E_TOKEN_MINUS = 3,
  E_TOKEN_STAR = 4,
  E_TOKEN_SLASH = 5,
  E_TOKEN_INILIT = 6,
  E_TOKEN_EQUALS = 7,
  E_TOKEN_IDENT = 8,
  E_TOKEN_PRINT = 9,
  E_TOKEN_INT = 10,
  E_TOKEN_SEMIT = 11,
  E_TOKEN_EQ = 12,
  E_TOKEN_NE = 13,
  E_TOKEN_LT = 14,
  E_TOKEN_GT = 15,
  E_TOKEN_LE = 16,
  E_TOKEN_GE = 17,
  E_TOKEN_LBRACE = 18,
  E_TOKEN_RBRACE = 19,
  E_TOKEN_LPAREN = 20,
  E_TOKEN_RPAREN = 21,
  E_TOKEN_IF = 22,
  E_TOKEN_ELSE = 23
};
bool token_IsValid(int value);
const token token_MIN = E_TOKEN_EOF;
const token token_MAX = E_TOKEN_ELSE;
const int token_ARRAYSIZE = token_MAX + 1;

const ::google::protobuf::EnumDescriptor* token_descriptor();
inline const ::std::string& token_Name(token value) {
  return ::google::protobuf::internal::NameOfEnum(
    token_descriptor(), value);
}
inline bool token_Parse(
    const ::std::string& name, token* value) {
  return ::google::protobuf::internal::ParseNamedEnum<token>(
    token_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace token

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::token::token>() {
  return ::token::token_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_type_2eproto__INCLUDED
